import asyncio
import logging
import sys
import os
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

from Data import lecturers, courses, auditorium

TOKEN = "7168890234:AAGwl3pcVp-UAVx5ySoElaPIuAMm9QUZBME" #  5667733135:AAHOkpMzf7x2bhoFeyOUsLku0ogAX-Ka-CI
ADMIN_ID = 1134942813

bot = Bot(token=TOKEN)
dp = Dispatcher()

blocked_users = {737513135, 1518031594, 1365443499, 911414947, 1402667653, 6500022364, 1617787180}

logging.basicConfig(level=logging.INFO, stream=sys.stdout)

alphabet = [chr(i) for i in range(ord('–ê'), ord('–Ø') + 1) if chr(i) not in ['–™', '–¨', '–Å', '–´', '–ô']]

active_users_file = "active_users.txt"

def save_user_id(user_id):
    try:
        if os.path.exists(active_users_file):
            with open(active_users_file, "r") as file:
                ids = file.read().splitlines()
        else:
            ids = []

        if str(user_id) not in ids:
            with open(active_users_file, "a") as file:
                file.write(f"{user_id}\n")
            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        else:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def load_active_users():
    try:
        if os.path.exists(active_users_file):
            with open(active_users_file, "r") as file:
                return {int(line.strip()) for line in file}
        return set()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return set()

def create_letter_markup():
    
    keyboard = []
    for letter in alphabet:
        button = InlineKeyboardButton(text=letter, callback_data=f"letter_{letter}")
        keyboard.append(button)

    markup = InlineKeyboardMarkup(inline_keyboard=[keyboard[i:i + 5] for i in range(0, len(keyboard), 5)])
    return markup

def create_lecturer_markup(letter):
    keyboard = []
    for name, url in lecturers.items():
        if name.startswith(letter):
            web_app_info = WebAppInfo(url=url)
            button = InlineKeyboardButton(text=name, web_app=web_app_info)
            keyboard.append(button)

    if keyboard:
        markup = InlineKeyboardMarkup(inline_keyboard=[keyboard[i:i + 1] for i in range(0, len(keyboard), 1)])
    else:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç—É –±—É–∫–≤—É", callback_data="no_lecturer")]
        ])
    return markup

def create_auditorium_markup(floor):
    keyboard = []
    for room, url in auditorium[floor].items():
        button = InlineKeyboardButton(text=room, web_app=WebAppInfo(url=url))
        keyboard.append(button)

    markup = InlineKeyboardMarkup(inline_keyboard=[keyboard[i:i + 2] for i in range(0, len(keyboard), 2)])
    return markup

def create_markup(course):
    keyboard = []
    for group, url in courses[course].items():
        button = InlineKeyboardButton(text=group, web_app=WebAppInfo(url=url))
        keyboard.append(button)

    markup = InlineKeyboardMarkup(inline_keyboard=[keyboard[i:i + 2] for i in range(0, len(keyboard), 2)])
    return markup

def create_main_menu():
    buttons = [
        [KeyboardButton(text='üìö –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è'), KeyboardButton(text='üè´ –í—ã–±—Ä–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é')],
        [KeyboardButton(text='1Ô∏è‚É£ –ö—É—Ä—Å 1'), KeyboardButton(text='2Ô∏è‚É£ –ö—É—Ä—Å 2')],
        [KeyboardButton(text='3Ô∏è‚É£ –ö—É—Ä—Å 3'), KeyboardButton(text='4Ô∏è‚É£ –ö—É—Ä—Å 4')],
        [KeyboardButton(text='üåê –°–î–û', web_app=WebAppInfo(url="https://eluniver.ugrasu.ru/login/index.php")),
         KeyboardButton(text='üë®‚Äçüíª –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º', web_app=WebAppInfo(url="https://forms.gle/2L1MHuK7G7zApePPA"))],
        [KeyboardButton(text='‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤')]
    ]
    markup = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    return markup


def log_user_activity(message: Message):
    try:
        user_id = message.from_user.id
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name if message.from_user.last_name else ''
        username = message.from_user.username if message.from_user.username else ''
        
        full_name = f"{first_name} {last_name}".strip() or username or f"ID {user_id}"
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id}, –ò–º—è: {full_name}, –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message.text}'")

        save_user_id(user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def is_user_blocked(user_id):
    return user_id in blocked_users

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    try:
        user_id = message.from_user.id
        if is_user_blocked(user_id):
            await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            return

        markup = create_main_menu()
        log_user_activity(message)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ command_start_handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message()
async def handle_text_commands(message: Message) -> None:
    try:
        user_id = message.from_user.id
        if is_user_blocked(user_id):
            await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            return

        log_user_activity(message)
        text = message.text

        if text == 'üìö –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è':
            markup = create_letter_markup()
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
        elif text == 'üè´ –í—ã–±—Ä–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é':
            floors_markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=floor, callback_data=f"floor_{floor}")] for floor in auditorium
            ])
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂:", reply_markup=floors_markup)
        elif text in ['4Ô∏è‚É£ –ö—É—Ä—Å 4', '3Ô∏è‚É£ –ö—É—Ä—Å 3', '2Ô∏è‚É£ –ö—É—Ä—Å 2', '1Ô∏è‚É£ –ö—É—Ä—Å 1']:
            course = text.split()[2]
            markup = create_markup(f"–ö—É—Ä—Å{course}")
            await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É {course} –∫—É—Ä—Å–∞:", reply_markup=markup)
        elif text == '‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤':
            await bot.send_photo(chat_id=message.chat.id, photo=types.FSInputFile("sched.jpg"), caption="–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤.")
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é. /start")

        if user_id == ADMIN_ID and text.startswith('/broadcast'):
            parts = text.split('/broadcast ', 1)
            if len(parts) == 2:
                message_text = parts[1]
                asyncio.create_task(broadcast_message(load_active_users(), message_text))
            else:
                await message.answer("–ö–æ–º–∞–Ω–¥–∞ /broadcast –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_text_commands: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def broadcast_message(active_users, message_text):
    for user in active_users:
        try:
            await bot.send_message(user, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message_text}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")

@dp.callback_query()
async def handle_callback_query(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        if is_user_blocked(user_id):
            await callback_query.message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            return

        data = callback_query.data
        if data.startswith("letter_"):
            letter = data.split("_")[1]
            markup = create_lecturer_markup(letter)
            await callback_query.message.answer(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–∞ –±—É–∫–≤—É {letter}:", reply_markup=markup)
        elif data.startswith("floor_"):
            floor = data.split("_")[1]
            markup = create_auditorium_markup(floor)
            await callback_query.message.answer(f"–ê—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ {floor} —ç—Ç–∞–∂–µ:", reply_markup=markup)
        elif data == "no_lecturer":
            await callback_query.message.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –±—É–∫–≤—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback_query: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def restart_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã."""
    while True:
        await asyncio.sleep(300)
        logging.info("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞...")
        try:
            os.execv(sys.executable, [sys.executable] + sys.argv)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

async def main():
    try:
        await bot.delete_webhook(drop_pending_updates=True)

        asyncio.create_task(restart_bot())

        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ main: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ: {e}")
